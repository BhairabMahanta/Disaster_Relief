<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Disaster Relief</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/css/home.css">
    <link rel="stylesheet" href="/css/emergency.css">
    <link rel="stylesheet" href="/css/header.css">
    <link rel="stylesheet" href="/css/stats.css">
    <link rel="stylesheet" href="/css/disaster_map.css">
    <link rel="stylesheet" href="/css/disasterAlert2.css">
    <link rel="stylesheet" href="/css/loader.css">
    <link rel="stylesheet" href="/css/graph.css">

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <style>
      canvas {
          max-height: 600px;
        max-width: 500px;
        margin-left: 17rem;
      }
      </style>
</head>
<body class="bg-grey-100" id="chamchamcham">
  <%-include('../partials/loader')%>
    <%- include('../partials/navbar') %>
<br><br>

  <%-include('../partials/emergency')%>
  <%- include('../partials/header')%>
  <%- include('../partials/graphs')%>
  <%- include('../partials/stats')%>
  <%- include('../partials/disaster_map')%>
  <br>
  <hr>
  <%- include('../partials/services')%>
  <%- include('../partials/FAQ')%>
  <%- include('../partials/contactUs') %>
  <%- include('../partials/aboutUs') %>
  <%- include('../partials/footer') %>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const contactList = document.getElementById("contact-list");
      const emergencyBtn = document.getElementById("emergency-btn");
      const menu = document.getElementById("menu");
      const contactSelection = document.getElementById("contact-selection");
      const addNumberModal = document.getElementById("add-number-modal");
    
      const voiceCallBtn = document.getElementById("voice-call");
      const whatsappCallBtn = document.getElementById("whatsapp-call");
      const addNumberBtn = document.getElementById("add-remove-number");
      const closeContactBtn = document.getElementById("close-contact-selection");
      const closeAddBtn = document.getElementById("close-add-modal");
    
      // Detect mobile
      function isMobile() {
        return /Android|iPhone|iPad|iPod/i.test(navigator.userAgent);
      }
    
      // Get correct WhatsApp link
      function getWhatsAppLink(phone) {
        return isMobile()
          ? `whatsapp://send?phone=${phone}`
          : `https://wa.me/${phone}`;
      }
    
      // Load contacts
      async function loadContacts() {
        const response = await fetch("/emergency/contacts");
        const contacts = await response.json();
    
        contactList.innerHTML = "";
    
        // Always add the top priority number
        const emergencyContact = {
          name: "Priority Emergency",
          phone: "7099774852"
        };
    
        [emergencyContact, ...contacts.filter(c => c.phone !== "7099774852")].forEach(contact => {
          const telLink = `tel:${contact.phone}`;
          const whatsappLink = getWhatsAppLink(contact.phone);
    
          const li = document.createElement("li");
          li.innerHTML = `
            <strong>${contact.name}</strong><br>
            <a href="${telLink}">üìû Call</a> | 
            <a href="${whatsappLink}" target="_blank">üí¨ WhatsApp</a>
            ${contact.phone !== "7099774852" ? ` | <button onclick="deleteContact('${contact.phone}')">‚ùå Delete</button>` : ""}
          `;
          contactList.appendChild(li);
        });
      }
    
      // Save contact
      document.getElementById("save-contact").addEventListener("click", () => {
        const name = document.getElementById("contact-name").value;
        const phone = document.getElementById("contact-phone").value;
    
        fetch("/emergency/contacts", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ name, phone }),
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) location.reload();
        });
      });
    
      // Delete contact
      window.deleteContact = (phone) => {
        fetch(`/emergency/contacts/${phone}`, {
          method: "DELETE"
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) loadContacts();
        });
      };
    
      // Button events
      emergencyBtn.addEventListener("click", () => {
        menu.style.display = menu.style.display === "block" ? "none" : "block";
      });
    
      voiceCallBtn.addEventListener("click", () => {
        menu.style.display = "none";
        contactSelection.style.display = "block";
        loadContacts();
      });
    
      whatsappCallBtn.addEventListener("click", () => {
        menu.style.display = "none";
        contactSelection.style.display = "block";
        loadContacts();
      });
    
      addNumberBtn.addEventListener("click", () => {
        menu.style.display = "none";
        addNumberModal.style.display = "block";
      });
    
      closeContactBtn.addEventListener("click", () => {
        contactSelection.style.display = "none";
      });
    
      closeAddBtn.addEventListener("click", () => {
        addNumberModal.style.display = "none";
      });
    });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const sosBtn = document.getElementById("send-sos");
      
        sosBtn.addEventListener("click", async () => {
          try {
            // Get Geolocation
            const position = await new Promise((resolve, reject) =>
              navigator.geolocation.getCurrentPosition(resolve, reject)
            );
            const { latitude, longitude } = position.coords;
      
            // Record Audio (5 seconds)
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            const mediaRecorder = new MediaRecorder(stream);
            const audioChunks = [];
      
            mediaRecorder.ondataavailable = event => audioChunks.push(event.data);
      
            mediaRecorder.onstop = async () => {
              const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
              const formData = new FormData();
              formData.append("audio", audioBlob);
              formData.append("lat", latitude);
              formData.append("lng", longitude);
      
              // Send to backend
              const response = await fetch("/emergency/sos", {
                method: "POST",
                body: formData,
              });
      
              const result = await response.json();
              if (result.success) {
                alert("üö® SOS Sent Successfully!");
              } else {
                alert("‚ùå Failed to send SOS.");
              }
            };
      
            mediaRecorder.start();
      
            setTimeout(() => {
              mediaRecorder.stop();
            }, 5000); // Record for 5 sec
      
          } catch (error) {
            console.error("Error during SOS:", error);
            alert("Failed to send SOS. Please check permissions.");
          }
        });
      });
      </script>
      
  <script src="../public/js/homeChatBot.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/js/loader.js"></script>
</body>
</html>
