<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Drone Mission Request</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <link rel="stylesheet" href="/css/home.css">
  <link rel="stylesheet" href="/css/drone.css">
  <link rel="stylesheet" href="/css/loader.css">
</head>
<body>
  <%-include('../partials/loader')%>
  <%- include('../partials/navbar') %>

    <img src="/img/drone2.jpg" alt="Drone" />

  <div class="content-wrapper">
    <h1>Request a Drone Mission üöÅ</h1>

    <div class="controls-row">
      <div class="priority-control">
        <label for="priority">Priority:</label>
        <select id="priority">
          <option value="High">High</option>
          <option value="Medium" selected>Medium</option>
          <option value="Low">Low</option>
        </select>
      </div>
      <button id="useCurrentLocationBtn" class="location-btn">üìç Use My Current Location</button>
    </div>

    <div id="map"></div>

    <button id="requestDroneBtn" class="request-btn">Request Drone</button>
  </div>

  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script>
    let map = L.map('map').setView([28.6139, 77.2090], 5); // Default view

    // Fixed base location (drone supplier base)
    const baseLocation = { lat: 28.6139, lon: 77.2090 }; // Delhi coordinates
    let targetMarker = null;
    let droneMarker = null;
    let flightPath = null;
    let selectedLatLon = null;
    let missionId = null; // To store mission ID from server

    // Add OpenStreetMap layer
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // Add base marker
    const baseMarker = L.marker([baseLocation.lat, baseLocation.lon], {
      title: "Drone Base Location",
      icon: L.icon({
        iconUrl: 'https://cdn-icons-png.flaticon.com/512/684/684908.png',
        iconSize: [40, 40]
      })
    }).addTo(map).bindPopup("Drone Base Location üõ´").openPopup();

    // Allow user to click on map to set target location
    map.on('click', function(e) {
      selectedLatLon = e.latlng;
      if (targetMarker) {
        targetMarker.setLatLng(selectedLatLon).openPopup();
      } else {
        targetMarker = L.marker(selectedLatLon, {
          title: "Target Location",
          icon: L.icon({
            iconUrl: 'https://cdn-icons-png.flaticon.com/512/854/854878.png',
            iconSize: [40, 40]
          })
        }).addTo(map).bindPopup("Target Location üéØ").openPopup();
      }
    });

    // üìç Use current location button
    document.getElementById('useCurrentLocationBtn').addEventListener('click', function() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          const userLat = position.coords.latitude;
          const userLon = position.coords.longitude;

          selectedLatLon = { lat: userLat, lng: userLon };

          // Center the map and place target marker
          map.setView([userLat, userLon], 15); // Zoom in to user's location

          if (targetMarker) {
            targetMarker.setLatLng(selectedLatLon).openPopup();
          } else {
            targetMarker = L.marker(selectedLatLon, {
              title: "Target Location (Your Location)",
              icon: L.icon({
                iconUrl: 'https://cdn-icons-png.flaticon.com/512/854/854878.png',
                iconSize: [40, 40]
              })
            }).addTo(map).bindPopup("Target Location üéØ (You)").openPopup();
          }
        }, function(error) {
          alert("Error fetching your location! Please allow location access.");
        });
      } else {
        alert("Geolocation is not supported by this browser.");
      }
    });

    // Request drone
    document.getElementById('requestDroneBtn').addEventListener('click', async () => {
      if (!selectedLatLon) {
        alert("Please select a target location manually or use current location first!");
        return;
      }

      const priority = document.getElementById('priority').value;

      // Remove existing flightPath and droneMarker if any
      if (flightPath) {
        map.removeLayer(flightPath);
        flightPath = null;
      }
      if (droneMarker) {
        map.removeLayer(droneMarker);
        droneMarker = null;
      }

      // Draw dotted path between base and target
      flightPath = L.polyline([[baseLocation.lat, baseLocation.lon], [selectedLatLon.lat, selectedLatLon.lng]], {
        color: 'blue',
        weight: 3,
        opacity: 0.7,
        dashArray: '10, 10' // dotted path
      }).addTo(map);

      // Create drone marker at base location
      droneMarker = L.marker([baseLocation.lat, baseLocation.lon], {
        icon: L.icon({
          iconUrl: '/img/drone1.png', // Make sure you have this locally
          iconSize: [40, 40]
        })
      }).addTo(map);

      // Send POST request to server to save mission
      try {
        const response = await fetch('/request-drone', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json' // Important!
          },
          body: JSON.stringify({
            baseLat: baseLocation.lat,
            baseLon: baseLocation.lon,
            targetLat: selectedLatLon.lat,
            targetLon: selectedLatLon.lng,
            priority: priority
          })
        });

        const data = await response.json();

        if (response.ok) {
          console.log(data.message);
          missionId = data.missionId; // Store mission ID for polling
          pollMissionStatus(); // Start polling updates from server
        } else {
          console.error(data.message);
          alert('Failed to start mission: ' + data.message);
        }
      } catch (error) {
        console.error('Error requesting drone:', error);
        alert('Error requesting drone mission.');
      }
    });

async function pollMissionStatus() {
  if (!missionId) return;

  try {
    const response = await fetch(`/api/missions/${missionId}`);
    if (!response.ok) throw new Error('Mission not found');
    const mission = await response.json();

    if (droneMarker) {
      droneMarker.setLatLng([mission.currentLat, mission.currentLon]);
    }

    if (mission.status === 'Completed') {
      alert("üöÅ Drone has reached the target! Mission Completed.");
      // Stop polling by not calling again
      return;
    } else {
      setTimeout(pollMissionStatus, 1000);
    }
  } catch (error) {
    console.error('Error fetching mission status:', error);
    setTimeout(pollMissionStatus, 3000);
  }
}
  </script>
  <script src="/js/loader.js"></script>
</body>
</html>
